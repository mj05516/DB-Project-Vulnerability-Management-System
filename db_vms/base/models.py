from pydoc import describe
from django.db import models
from django.contrib.auth.models import User

class WeaknessType(models.Model):
    name = models.CharField(max_length=100)
    description = models.CharField(max_length=1000,null = True, blank = True)

    def __str__(self):
        return self.name

class CVE(models.Model):
    cve_id = models.CharField(max_length=20, primary_key=True, unique=True)
    date = models.DateField()
    description = models.TextField()
    language = models.CharField(max_length=20)
    score = models.FloatField(null=True, blank=True)
    weakness_type = models.ForeignKey(WeaknessType, on_delete=models.SET_NULL, null=True)
    solution = models.TextField(null=True, blank=True)
    # room = models.ForeignKey(DiscussionRoom, on_delete=models.SET_NULL, null=True, blank=True)
    link = models.CharField(max_length=100)
    # many to many relationship with DiscussionRoom
    # room = models.ManyToManyField(DiscussionRoom, related_name='rooms', blank=True, null=True)


    attack_choice = (
        ('low', 'Low'),
        ('high', 'High')
    )

    attack_complexity = models.CharField(max_length=10, choices=attack_choice, default='low')

    user_inter_choice = (
        ('none', 'None'),
        ('required', 'Required')
    )

    user_interaction = models.CharField(max_length=20, choices=user_inter_choice, default='none')

    availability_choice =(
        ('none', 'None'),
        ('high', 'High'),
        ('low', 'Low')
    )

    availability = models.CharField(max_length=10, choices=availability_choice, default='none')

    # make status choices
    status_choice = (
        ('solved', 'Solved'),
        ('unsolved', 'Unsolved'),
        ('in progress', 'In Progress')
    )

    status = models.CharField(max_length=20, choices=status_choice, default='unsolved')

    def __str__(self):
        return self.cve_id


class DiscussionRoom(models.Model):
    title = models.CharField(max_length=100)
    description = models.TextField(null=True, blank=True)
    topic = models.ForeignKey(WeaknessType, on_delete=models.SET_NULL, null=True)
    host = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    members = models.ManyToManyField(User, related_name='members', blank=True)
    cves = models.ManyToManyField(CVE, related_name='cves', blank=True)

    def __str__(self):
        return self.title

class Message(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    droom = models.ForeignKey(DiscussionRoom, on_delete=models.CASCADE)
    message = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.message

