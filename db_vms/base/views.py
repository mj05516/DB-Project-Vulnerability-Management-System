from datetime import datetime
from django.shortcuts import render, redirect
from django.contrib.auth.models import User
from django.contrib.auth.models import Group
from django.contrib.auth import authenticate, login, logout
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django_datatables_view.base_datatable_view import BaseDatatableView
from django.utils.html import escape
from django.db.models import Q
from django.db.models import Count
# import jsonresponse
from django.http import JsonResponse




from .models import *
import logging

graph_color = ['#2c7be5', '#27bcfd', '#d8e2ef']
logger = logging.getLogger("mylogger")

class CveListJson(BaseDatatableView):
    # model = CVE 
    model = CVE
    columns = ['checkbox', 'cve_id', 'date', 'language', 'score', 'weakness_type', 'attack_complexity', 'user_interaction', 'availability', 'status', 'options']
    order_columns = ['', 'cve_id', 'date', 'language', 'score', 'weakness_type', 'attack_complexity', 'user_interaction', 'availability', 'status', '']
    max_display_length = 100

    def filter_queryset(self, qs):
        # use request parameters to filter queryset
        search = self.request.GET.get('search[value]', None)
        if search:
            # qs = qs.filter(cve_id__istartswith=search)
            # seach by cve_id, description, weakness_type, solution
            qs = qs.filter(Q(cve_id__icontains=search) | Q(weakness_type__name__icontains=search))

        return qs
    
    def render_column(self, row, column):
        if column == 'options':     
            # return '<td class="align-middle white-space-nowrap py-2 text-end"><div class="dropdown font-sans-serif position-static"><button class="btn btn-link text-600 btn-sm dropdown-toggle btn-reveal" type="button"id="customer-dropdown-0" data-bs-toggle="dropdown" data-boundary="window" aria-haspopup="true"aria-expanded="false"><span class="fas fa-ellipsis-h fs--1"></span></button><div class="dropdown-menu dropdown-menu-end border py-0" aria-labelledby="customer-dropdown-0"><div class="bg-white py-2"><a class="dropdown-item text-danger" href="/delete_cve/%s">Delete</a></div></div></div></td>' % escape(row.pk)
            # return '<a href="/delete_cve/%s" class="btn btn-hbl btn-sm">Delete</a>' % escape(row.pk)
            # check if user is admin
            if self.request.user.is_superuser:
                return ' <button class="btn btn-hbl btn-sm edit-cve" type="button" value=%s><i class="fas fa-edit"></i> Edit</button>' % row.cve_id
            else:
                return ' <button class="btn btn-hbl btn-sm disabled" type="button"><i class="fas fa-edit"></i> Edit</button>'
        
        return super(CveListJson, self).render_column(row, column)
    
class UserListJson(BaseDatatableView):
    # model = CVE 
    model = User
    columns = ['checkbox', 'username', 'first_name', 'last_name', 'email', 'designation', 'date_joined', 'options']
    order_columns = ['', 'username', 'first_name', 'last_name', 'email', 'designation', 'date_joined', '']
    max_display_length = 100

    def filter_queryset(self, qs):
        # use request parameters to filter queryset
        search = self.request.GET.get('search[value]', None)
        if search:
            qs = qs.filter(Q(username__icontains=search) | Q(first_name__icontains=search) | Q(last_name__icontains=search) | Q(email__icontains=search) | Q(designation__icontains=search))

        return qs
    
    def render_column(self, row, column):
        if column == 'options':     
            if self.request.user.is_superuser:
                return ' <button class="btn btn-hbl btn-sm edit-user" type="button" value=%s><i class="fas fa-edit"></i> Edit</button>' % row.id
            else:
                return ' <button class="btn btn-hbl btn-sm disabled" type="button"><i class="fas fa-edit"></i> Edit</button>'
            
        elif column == 'designation':
            if row.is_superuser:
                return 'SuperUser'
            elif row.groups.filter(name='Admin').exists():
                return 'Admin'
            elif row.groups.filter(name='Project Manager').exists():
                return 'Project Manager'
            elif row.groups.filter(name='Software Engineer').exists():
                return 'Developer'
            
        elif column == 'date_joined':
            return row.date_joined.strftime("%d %b %Y")
        
        elif column == 'username':
            
            return '<div class="d-flex d-flex align-items-center"><div class="avatar avatar-xl me-2"><div class="avatar-name rounded-circle"><span>%s%s</span></div></div><div class="flex-1"><h5 class="mb-0 fs--1">%s</h5></div></div>' % (row.first_name[0], row.last_name[0], row.username)

        
        return super(UserListJson, self).render_column(row, column)
  
@login_required(login_url='login')
def home(request):
    languages = CVE.objects.values('language').annotate(total=Count('language')).order_by('-total')[:2]
    # count of total cve
    total_cve = CVE.objects.all().count()
    for i in range(len(languages)):
        languages[i]['color'] = graph_color[i]
        # logger.info(languages[i])

    # count of total cve with language not C, PHP
    total_cve_other = CVE.objects.exclude(language='C').exclude(language='PHP').count()
        
    context = {
        'nbar': 'home',
        'top_languages': languages,
        'total_languages': total_cve,
        'total_other': total_cve_other,
        }
    return render(request, 'base/home.html', context)

def fetch_cve(request):
    if request.method == 'POST':
        cve_id = request.POST.get('cve_id')
        cve = CVE.objects.get(cve_id=cve_id)
        logger.info(cve.weakness_type.name)
        data = {
            'cve_id': cve.cve_id,
            'date': cve.date,
            'language': cve.language,
            'score': cve.score,
            'weakness_type': cve.weakness_type.name,
            'attack_complexity': cve.attack_complexity,
            'user_interaction': cve.user_interaction,
            'availability': cve.availability,
            'status': cve.status,
            'description': cve.description,
            'solution': cve.solution,
        }
        return JsonResponse(data)

def fetch_user(request):
    if request.method == 'POST':
        user_id = request.POST.get('id')
        user = User.objects.get(id=user_id)
        data = {
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'email': user.email,
            # make an array of groups
            'groups': [group.name for group in user.groups.all()],
        }
        logger.info(data)
        return JsonResponse(data)    

@login_required(login_url='login')
def discussion_room(request):
    disscuss_rooms = DiscussionRoom.objects.all()
    cves = CVE.objects.all()
    users = User.objects.all()
    weaknessType = WeaknessType.objects.all()
    context = {'nbar': 'dr-home','rooms': disscuss_rooms, 'cves': cves, 'users':users, 'weeknessTypes':weaknessType}
    return render(request, 'base/dis-room-home.html', context)

@login_required(login_url='login')
def d_room(request,pk):
    room = None
    for i in DiscussionRoom.objects.all():
        if i.id == int(pk):
            room = i
            break

    if request.method == "POST":
        m = request.POST.get('body')
        Message.objects.create(user=request.user, droom=room, message=m)
        
        return redirect('d-room', pk=pk) 

    messages = Message.objects.filter(droom=room).order_by('-timestamp')
    # members of that room
    members = room.members.all()
    context = {'nbar': 'd-room', 'room':room, 'messages':messages, 'members': members}
    return render(request, 'base/d-room.html', context)

def loginPage(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')

        try:
            user = User.objects.get(username=username)
            user = authenticate(request, username=username, password=password)

            if user is not None:
                login(request, user)
                return redirect('home')
            else:
                messages.error(request, 'Username or password is incorrect', extra_tags='fas fa-times-circle text-white fs-3')

        except:
            messages.info(request, 'Username does not exist', extra_tags='fas fa-info-circle text-white fs-3')
            

       

    context = {}
    return render(request, 'base/login_screen.html', context)

@login_required(login_url='login')
def logoutUser(request):
    logout(request)
    return redirect('login')

@login_required(login_url='login')
def csv_upload(request):
    context = {
        'nbar': 'csv-upload',
        'title': 'Upload CSV',
        'uploadStatus' : False,
    }
    if request.method == 'GET':
        return render(request, 'base/csv_upload.html', context)
    else:
        csv_file = request.FILES['file']
        if not csv_file.name.endswith('.csv'):
            messages.error(request, 'THIS IS NOT A CSV FILE')
            # data_set = csv_file.read().decode('UTF-8')
            return render(request, 'base/csv_upload.html', context)
        else:
            # data_set = csv_file.read().decode('UTF-8')
            import pandas as pd
            df = pd.read_csv(csv_file, encoding='latin1')
            # io_string = io.StringIO(data_set)
            # next(io_string)
            # df = pandas.read_csv(data_set)
            # df = pandas.DataFrame(data_set)
            messages.error(request, 'UPLOADED!!!')
            # convert to list 
            df = df.values.tolist()
            for i in df:
                print(i)
                cve_id = i[0]
                cve_date = i[1]
                description = i[2]
                language = i[3]
                reference  = i[4]
                score = i[5]
                weeknessType = i[6]
                solution = i[7]
                attackComp = i[8]
                userInter = i[9]
                availability = i[10]
                link = i[11]

                # check if cve_id already exists
                if CVE.objects.filter(cve_id=cve_id).exists():
                    continue

                # check if weeknessType is already in the table weeknesstype
                if WeaknessType.objects.filter(name=weeknessType).exists():
                    weeknessType = WeaknessType.objects.get(name=weeknessType)
                else:
                    weeknessType = WeaknessType.objects.create(name=weeknessType)

                # convert cve_Date to datefeild format
                cve_date = cve_date
                

                if solution == 'No fix version available':
                    status = 'unsolved'
                else:
                    status = 'solved'

                cve_date = cve_date.split('/')
                cve_date = cve_date[2] + '-' + cve_date[1] + '-' + cve_date[0]

                print(cve_date)
                CVE.objects.create(
                    cve_id=cve_id,
                    date=cve_date,
                    description=description,
                    language=language,
                    score=score,
                    weakness_type = weeknessType,
                    solution=solution,
                    link=link,
                    attack_complexity=attackComp,
                    user_interaction=userInter,
                    availability=availability,
                    status=status,
                )
            context = {
                'nbar': 'csv-upload',
                'title': 'Upload CSV',
                'uploadStatus' : True,
            }
            return render(request, 'base/csv_upload.html', context)

def delete_message(request, pk):
    message = Message.objects.get(id=pk)
    if request.user == message.user or request.user.is_superuser:
        message.delete()
    return redirect('d-room', pk=message.droom.id)

def delete_room(request, pk):
    room = DiscussionRoom.objects.get(id=pk)
    room.delete()
    return redirect('dr-home')

def delete_user(request, pk):
    user = User.objects.get(id=pk)
    if request.user.is_superuser:
        user.delete()
    return redirect('user-listing')

def delete_multiple_users(request):
    logger.info('ENTRY POINT here')
    if request.method == "POST":
        if request.POST.get('bulk-action') == 'delete':
            logger.info('delete here')
            logger.info("users: " + request.POST.get('users'))
            for i in request.POST.getlist('user'):
                user = User.objects.get(id=i)
                user.delete()
    return redirect('user-listing')

def delete_multiple_cves(request):
    logger.info('ENTRY POINT here')
    if request.method == "POST":
        # get the list of cves via ajax
        cves = request.POST.getlist('cve_ids[]')
        logger.info(cves)
        msg = 'CVEs deleted successfully '
        for i in cves:
            cve = CVE.objects.get(cve_id=i)
            cve.delete()
            msg += i + ', '

        messages.error(request, msg[:-2], extra_tags='fas fa-check-circle text-white fs-3')

        return JsonResponse({'status': 'success'})
           
def add_user(request):
    if request.method == 'POST' and request.user.is_superuser:
        username = request.POST.get('username')
        password = username[::-1]
        email = request.POST.get('email')
        first_name = request.POST.get('firstname')
        last_name = request.POST.get('lastname')
        designation = request.POST.get('designation')
        if designation == '3':
            group = 'Admin'

        elif designation == '2':
            group = 'Project Manager'

        elif designation == '1':
            group = 'Software Engineer'

        if User.objects.filter(username=username).exists():
            messages.error(request, 'Username already exists')
            return redirect('user-listing')
        else:
            user = User.objects.create_user(
                username=username,
                password=password,
                email=email,
                first_name=first_name,
                last_name=last_name,
            )
            user.groups.add(Group.objects.get(name=group))
            messages.success(request, 'User created successfully', extra_tags='fas fa-check-circle text-white fs-3')
            return redirect('user-listing')
    return redirect('user-listing')

def update_user(request):
    if request.method == 'POST' and request.user.is_superuser:
        pk = request.POST.get('pk')
        username = request.POST.get('username')
        logger.info(username)
        email = request.POST.get('email')
        first_name = request.POST.get('firstname')
        last_name = request.POST.get('lastname')
        designation = request.POST.get('designation')
        if designation == '3':
            is_superuser = True
            is_staff = False
        elif designation == '2':
            is_superuser = False
            is_staff = True
        else:
            is_superuser = False
            is_staff = False

        if User.objects.filter(username=username).exists():
            user = User.objects.get(username=username)
            if user.id == int(pk):
                user.email = email
                user.first_name = first_name
                user.last_name = last_name
                user.is_superuser = is_superuser
                user.is_staff = is_staff
                user.save()
                messages.success(request, 'User updated successfully')
                return redirect('user-listing')
            else:
                messages.error(request, 'Username already exists')
                return redirect('user-listing')
        else:
            messages.error(request, 'Username can not be changed')        
    return redirect('user-listing')

def add_cve(request):
    if request.method == 'POST' and request.user.is_superuser:
        cve_id = request.POST.get('cve_id')
        # get current date
        date = datetime.now()
        description = request.POST.get('description')
        language = request.POST.get('language')
        score = request.POST.get('score')
        weakness_type = request.POST.get('weekness_type')
        solution = request.POST.get('solution')
        link = "N/A"
        attack_complexity = request.POST.get('ac')
        user_interaction = request.POST.get('ui')
        availability = request.POST.get('availability')
        status = request.POST.get('status')

        if WeaknessType.objects.filter(name=weakness_type).exists():
            weakness_type = WeaknessType.objects.get(name=weakness_type)
        else:
            weakness_type = WeaknessType.objects.create(name=weakness_type)


        if CVE.objects.filter(cve_id=cve_id).exists():
            messages.error(request, 'CVE ID already exists', extra_tags='fas fa-times-circle text-white fs-3')
            return redirect('cve-listing-ssp')
        else:
            cve = CVE.objects.create(
                cve_id=cve_id,
                date=date,
                description=description,
                language=language,
                score=score,
                weakness_type=weakness_type,
                solution=solution,
                link=link,
                attack_complexity=attack_complexity,
                user_interaction=user_interaction,
                availability=availability,
                status=status,
            )
            messages.success(request, 'CVE created successfully', extra_tags='fas fa-check-circle text-white fs-3')
            return redirect('cve-listing-ssp')
    return redirect('cve-listing-ssp')
    
def edit_cve(request):
    if request.method == 'POST' and request.user.is_superuser:
        cve_id = request.POST.get('cve_id')
        description = request.POST.get('description')
        language = request.POST.get('language')
        score = request.POST.get('score')
        weakness_type = request.POST.get('weekness_type')
        solution = request.POST.get('solution')
        link = "N/A"
        attack_complexity = request.POST.get('ac')
        user_interaction = request.POST.get('ui')
        availability = request.POST.get('availability')
        status = request.POST.get('status')

        if WeaknessType.objects.filter(name=weakness_type).exists():
            weakness_type = WeaknessType.objects.get(name=weakness_type)
        else:
            weakness_type = WeaknessType.objects.create(name=weakness_type)

        # if CVE.objects.filter(cve_id=cve_id).exists():
        #     messages.error(request, 'CVE ID already exists')
        #     return redirect('cve-listing')
        # else:
        cve = CVE.objects.get(cve_id=cve_id)
        cve.cve_id = cve_id
        cve.description = description
        cve.language = language
        cve.score = score
        cve.weakness_type = weakness_type
        cve.solution = solution
        cve.link = link
        cve.attack_complexity = attack_complexity
        cve.user_interaction = user_interaction
        cve.availability = availability
        cve.status = status
        cve.save()
        messages.success(request, 'CVE updated successfully', extra_tags='fas fa-check-circle text-white fs-3')
        return redirect('cve-listing-ssp')
    return redirect('cve-listing-ssp')

def delete_cve(request, pk):
    cve = CVE.objects.get(cve_id=pk)
    if request.user.is_superuser:
        cve.delete()
        messages.error(request, 'CVE deleted successfully', extra_tags='fas fa-check-circle text-white fs-3')
    return redirect('cve-listing-ssp')

@login_required(login_url='login')
def userListing(request):
    users = User.objects.all()
    context = {'nbar': 'user-listing'}
    return render(request, 'base/user_listing.html', context)

@login_required(login_url='login')
def cveListing(request):
    cves = CVE.objects.all()
    weeknessTypes = WeaknessType.objects.all()
    context = {'nbar': 'cve-listing', 'cves':cves, 'weeknessTypes':weeknessTypes}
    # context = {'nbar': 'cve-listing'}
    return render(request, 'base/cve_listing.html', context)

def cveListingSSP(request):
    context = {'nbar': 'cve-listing-ssp'}
    return render(request, 'base/cve_listing_ssp.html', context)

def add_room(request):
    if request.method == 'POST':
        name = request.POST.get('title')
        description = request.POST.get('description')
        members = request.POST.getlist('members')
        cves = request.POST.getlist('cves')
        topics = request.POST.get('topic')
        if DiscussionRoom.objects.filter(title=name).exists():
            messages.error(request, 'Room already exists')
            return redirect('dr-home')
        else:
            room = DiscussionRoom.objects.create(
                title=name,
                description=description,
                host=request.user,
                topic=topics,
                created_at = datetime.now(),
                updated_at = datetime.now(),
            )
            room.save()
            for m in members:
                room.members.add(m)

            messages.success(request, 'Room created successfully')
            return redirect('dr-home')
    return redirect('dr-home')

def fetch_groups(request):
    if request.method == 'POST':
        groups = [group.name for group in Group.objects.all()]
        logger.info(groups)
        return JsonResponse({'success': True, 'groups': groups})
    return JsonResponse({'success': False})