from datetime import datetime
from django.shortcuts import render, redirect
from django.contrib.auth.models import User
from django.contrib.auth import authenticate, login, logout
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.db.models import Count

from .models import *
import logging

graph_color = ['#2c7be5', '#27bcfd', '#d8e2ef']
logger = logging.getLogger("mylogger")

@login_required(login_url='login')
def home(request):
    languages = CVE.objects.values('language').annotate(total=Count('language')).order_by('-total')[:2]
    for i in range(len(languages)):
        languages[i]['color'] = graph_color[i]
        # logger.info(languages[i])
        
    context = {
        'nbar': 'home',
        'top_languages': languages,
        }
    return render(request, 'base/home.html', context)

@login_required(login_url='login')
def discussion_room(request):
    disscuss_rooms = DiscussionRoom.objects.all()
    cves = CVE.objects.all()
    users = User.objects.all()
    weaknessType = WeaknessType.objects.all()
    context = {'nbar': 'dr-home','rooms': disscuss_rooms, 'cves': cves, 'users':users, 'weeknessTypes':weaknessType}
    return render(request, 'base/dis-room-home.html', context)

@login_required(login_url='login')
def new_room(request):
    context = {'nbar': 'new-room',
                'title': 'New Room'}
    return render(request, 'base/make_room.html', context)

@login_required(login_url='login')
def d_room(request,pk):
    room = None
    for i in DiscussionRoom.objects.all():
        if i.id == int(pk):
            room = i
            break

    if request.method == "POST":
        m = request.POST.get('body')
        Message.objects.create(user=request.user, droom=room, message=m)
        
        return redirect('d-room', pk=pk) 

    messages = Message.objects.filter(droom=room).order_by('-timestamp')
    context = {'nbar': 'd-room', 'room':room, 'messages':messages}
    return render(request, 'base/d-room.html', context)

def loginPage(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')

        try:
            user = User.objects.get(username=username)
        except:
            messages.info(request, 'Username does not exist')

        user = authenticate(request, username=username, password=password)

        if user is not None:
            login(request, user)
            return redirect('home')
        else:
            messages.error(request, 'Username or password is incorrect')

    context = {}
    return render(request, 'base/login_screen.html', context)

@login_required(login_url='login')
def logoutUser(request):
    logout(request)
    return redirect('login')


def csv_upload(request):
    context = {
        'nbar': 'csv-upload',
        'title': 'Upload CSV',
        'uploadStatus' : False,
    }
    if request.method == 'GET':
        return render(request, 'base/csv_upload.html', context)
    else:
        csv_file = request.FILES['file']
        if not csv_file.name.endswith('.csv'):
            messages.error(request, 'THIS IS NOT A CSV FILE')
            # data_set = csv_file.read().decode('UTF-8')
            return render(request, 'base/csv_upload.html', context)
        else:
            # data_set = csv_file.read().decode('UTF-8')
            import pandas as pd
            df = pd.read_csv(csv_file, encoding='latin1')
            # io_string = io.StringIO(data_set)
            # next(io_string)
            # df = pandas.read_csv(data_set)
            # df = pandas.DataFrame(data_set)
            messages.error(request, 'UPLOADED!!!')
            # convert to list 
            df = df.values.tolist()
            for i in df:
                print(i)
                cve_id = i[0]
                cve_date = i[1]
                description = i[2]
                language = i[3]
                reference  = i[4]
                score = i[5]
                weeknessType = i[6]
                solution = i[7]
                attackComp = i[8]
                userInter = i[9]
                availability = i[10]
                link = i[11]
                # check if weeknessType is already in the table weeknesstype
                if WeaknessType.objects.filter(name=weeknessType).exists():
                    weeknessType = WeaknessType.objects.get(name=weeknessType)
                else:
                    weeknessType = WeaknessType.objects.create(name=weeknessType)

                # convert cve_Date to datefeild format
                cve_date = cve_date
                

                if solution == 'No fix version available':
                    status = 'unsolved'
                else:
                    status = 'solved'

                cve_date = cve_date.split('/')
                cve_date = cve_date[2] + '-' + cve_date[1] + '-' + cve_date[0]

                print(cve_date)
                CVE.objects.create(
                    cve_id=cve_id,
                    date=cve_date,
                    description=description,
                    language=language,
                    score=score,
                    weakness_type = weeknessType,
                    solution=solution,
                    link=link,
                    attack_complexity=attackComp,
                    user_interaction=userInter,
                    availability=availability,
                    status=status,
                )
            context = {
                'nbar': 'csv-upload',
                'title': 'Upload CSV',
                'uploadStatus' : True,
            }
            return render(request, 'base/csv_upload.html', context)



def delete_message(request):
    if request.method == "POST":
        pk = request.POST.get('pk')
        print(pk)
        m = Message.objects.get(id=pk)
        idd = m.droom.id
        m.delete()
        return redirect('d-room', idd)

def delete_message(request, pk):
    message = Message.objects.get(id=pk)
    if request.user == message.user or request.user.is_superuser:
        message.delete()
    return redirect('d-room', pk=message.droom.id)

def delete_user(request, pk):
    user = User.objects.get(id=pk)
    if request.user.is_superuser:
        user.delete()
    return redirect('user-listing')

def delete_multiple_users(request):
    logger.info('ENTRY POINT here')
    if request.method == "POST":
        if request.POST.get('bulk-action') == 'delete':
            logger.info('delete here')
            logger.info("users: " + request.POST.get('users'))
            for i in request.POST.getlist('user'):
                user = User.objects.get(id=i)
                user.delete()
    return redirect('user-listing')

def delete_multiple_cves(request):
    logger.info('ENTRY POINT here')
    if request.method == "POST":
        if request.POST.get('bulk-action') == 'delete':
            logger.info('delete here')
            logger.info("cves: " + request.POST.get('cves'))
            for i in request.POST.getlist('cve'):
                cve = CVE.objects.get(id=i)
                cve.delete()
    return redirect('cve-listing')


def add_user(request):
    if request.method == 'POST' and request.user.is_superuser:
        username = request.POST.get('username')
        password = username[::-1]
        email = request.POST.get('email')
        first_name = request.POST.get('firstname')
        last_name = request.POST.get('lastname')
        designation = request.POST.get('designation')
        if designation == 3:
            is_superuser = True
            is_staff = False
        elif designation == 2:
            is_superuser = False
            is_staff = True
        else:
            is_superuser = False
            is_staff = False

        if User.objects.filter(username=username).exists():
            messages.error(request, 'Username already exists')
            return redirect('user-listing')
        else:
            user = User.objects.create_user(
                username=username,
                password=password,
                email=email,
                first_name=first_name,
                last_name=last_name,
                is_superuser=is_superuser,
                is_staff=is_staff,
            )
            messages.success(request, 'User created successfully')
            return redirect('user-listing')
    return redirect('user-listing')


def add_cve(request):
    if request.method == 'POST' and request.user.is_superuser:
        cve_id = request.POST.get('cve_id')
        # get current date
        date = datetime.now()
        description = request.POST.get('description')
        language = request.POST.get('language')
        score = request.POST.get('score')
        weakness_type = request.POST.get('weekness_type')
        solution = request.POST.get('solution')
        link = "N/A"
        attack_complexity = request.POST.get('ac')
        user_interaction = request.POST.get('ui')
        availability = request.POST.get('availability')
        status = request.POST.get('status')

        if WeaknessType.objects.filter(name=weakness_type).exists():
            weakness_type = WeaknessType.objects.get(name=weakness_type)
        else:
            weakness_type = WeaknessType.objects.create(name=weakness_type)


        if CVE.objects.filter(cve_id=cve_id).exists():
            messages.error(request, 'CVE ID already exists')
            return redirect('cve-listing')
        else:
            cve = CVE.objects.create(
                cve_id=cve_id,
                date=date,
                description=description,
                language=language,
                score=score,
                weakness_type=weakness_type,
                solution=solution,
                link=link,
                attack_complexity=attack_complexity,
                user_interaction=user_interaction,
                availability=availability,
                status=status,
            )
            messages.success(request, 'CVE created successfully')
            return redirect('cve-listing')
    return redirect('cve-listing')
    


def delete_cve(request, pk):
    cve = CVE.objects.get(cve_id=pk)
    if request.user.is_superuser:
        cve.delete()
    return redirect('cve-listing')

def userListing(request):
    users = User.objects.all()

    

    context = {'nbar': 'user-listing', 'users':users}
    return render(request, 'base/user_listing.html', context)

def cveListing(request):
    cves = CVE.objects.all()
    weeknessTypes = WeaknessType.objects.all()
    context = {'nbar': 'cve-listing', 'cves':cves, 'weeknessTypes':weeknessTypes}
    return render(request, 'base/cve_listing.html', context)


def add_room(request):
    if request.method == 'POST':
        name = request.POST.get('title')
        description = request.POST.get('description')
        members = request.POST.getlist('members')
        cves = request.POST.getlist('cves')
        topics = request.POST.get('topic')
        if DiscussionRoom.objects.filter(title=name).exists():
            messages.error(request, 'Room already exists')
            return redirect('dr-home')
        else:
            room = DiscussionRoom.objects.create(
                title=name,
                description=description,
                host=request.user,
                topic=topics,
                created_at = datetime.now(),
                updated_at = datetime.now(),
            )
            room.save()
            for m in members:
                room.members.add(m)

            messages.success(request, 'Room created successfully')
            return redirect('dr-home')
    return redirect('dr-home')