import csv
from datetime import datetime
import io
from django.shortcuts import render, redirect
from django.contrib.auth.models import User
from django.contrib.auth import authenticate, login, logout
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from .models import *

@login_required(login_url='login')
def home(request):
    context = {'nbar': 'home'}
    return render(request, 'base/home.html', context)

@login_required(login_url='login')
def discussion_room(request):
    disscuss_rooms = DiscussionRoom.objects.all()
    context = {'nbar': 'dr-home','rooms': disscuss_rooms}
    return render(request, 'base/dis-room-home.html', context)

@login_required(login_url='login')
def new_room(request):
    context = {'nbar': 'new-room',
                'title': 'New Room'}
    return render(request, 'base/make_room.html', context)

@login_required(login_url='login')
def d_room(request,pk):
    room = None
    for i in DiscussionRoom.objects.all():
        if i.id == int(pk):
            room = i
            break

    if request.method == "POST":
        m = request.POST.get('body')
        Message.objects.create(user=request.user, droom=room, message=m)
        
        return redirect('d-room', pk=pk) 

    messages = Message.objects.filter(droom=room).order_by('-timestamp')
    context = {'nbar': 'd-room', 'room':room, 'messages':messages}
    return render(request, 'base/d-room.html', context)

def loginPage(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')

        try:
            user = User.objects.get(username=username)
        except:
            messages.info(request, 'Username does not exist')

        user = authenticate(request, username=username, password=password)

        if user is not None:
            login(request, user)
            return redirect('home')
        else:
            messages.error(request, 'Username or password is incorrect')

    context = {}
    return render(request, 'base/login_screen.html', context)

@login_required(login_url='login')
def logoutUser(request):
    logout(request)
    return redirect('login')


def csv_upload(request):
    context = {
        'nbar': 'csv-upload',
        'title': 'Upload CSV',
        'uploadStatus' : False,
    }
    if request.method == 'GET':
        return render(request, 'base/csv_upload.html', context)
    else:
        csv_file = request.FILES['file']
        if not csv_file.name.endswith('.csv'):
            messages.error(request, 'THIS IS NOT A CSV FILE')
            # data_set = csv_file.read().decode('UTF-8')
            return render(request, 'base/csv_upload.html', context)
        else:
            # data_set = csv_file.read().decode('UTF-8')
            import pandas as pd
            df = pd.read_csv(csv_file, encoding='latin1')
            # io_string = io.StringIO(data_set)
            # next(io_string)
            # df = pandas.read_csv(data_set)
            # df = pandas.DataFrame(data_set)
            messages.error(request, 'UPLOADED!!!')
            # convert to list 
            df = df.values.tolist()
            for i in df:
                print(i)
                cve_id = i[0]
                cve_date = i[1]
                description = i[2]
                language = i[3]
                reference  = i[4]
                score = i[5]
                weeknessType = i[6]
                solution = i[7]
                attackComp = i[8]
                userInter = i[9]
                availability = i[10]
                link = i[11]
                # check if weeknessType is already in the table weeknesstype
                if WeaknessType.objects.filter(name=weeknessType).exists():
                    weeknessType = WeaknessType.objects.get(name=weeknessType)
                else:
                    weeknessType = WeaknessType.objects.create(name=weeknessType)

                # convert cve_Date to datefeild format
                cve_date = cve_date
                # remove the first and last character of solution
                solution = solution[1:-1]

                if solution == 'No fix version available':
                    status = 'unsolved'
                else:
                    status = 'solved'

                # change cve_date from dd/mm/yyyy to yyyy-mm-dd
                cve_date = cve_date.split('/')
                cve_date = cve_date[2] + '-' + cve_date[1] + '-' + cve_date[0]

                print(cve_date)
                CVE.objects.create(
                    cve_id=cve_id,
                    date=cve_date,
                    description=description,
                    language=language,
                    score=score,
                    weakness_type = weeknessType,
                    solution=solution,
                    link=link,
                    attack_complexity=attackComp,
                    user_interaction=userInter,
                    availability=availability,
                    status=status,
                )
            

            context = {
                'nbar': 'csv-upload',
                'title': 'Upload CSV',
                'uploadStatus' : True,
            }
            return render(request, 'base/csv_upload.html', context)



def delete_message(request):
    if request.method == "POST":
        pk = request.POST.get('pk')
        print(pk)
        m = Message.objects.get(id=pk)
        idd = m.droom.id
        m.delete()
        return redirect('d-room', idd)
# def delete_message(request):
#     if request.method == "POST":
#         pk = request.POST.get('pk')
#         print(pk)
#         m = Message.objects.get(id=pk)
#         idd = m.droom.id
#         m.delete()
#         return redirect('d-room', id)

def delete_message(request, pk):
    message = Message.objects.get(id=pk)
    if request.user == message.user:
        message.delete()
    return redirect('d-room', pk=message.droom.id)


